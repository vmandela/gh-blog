-------------------------------------------------------------------------------
{-# LANGUAGE OverloadedStrings #-}
import           Data.Monoid                    ( mappend )
import           Hakyll
import qualified Data.Set                      as S
import           Text.Pandoc                   as Pandoc
import           Text.Pandoc.Options
import           Text.Pandoc.Highlighting       ( pygments )
import           Data.String                    ( String )
import           System.FilePath                ( replaceExtension
                                                , takeDirectory
                                                )
-- import           System.Cmd             (system)
import           System.Process
import           System.IO.Unsafe
-- import           Text.Table.Tablify
--import           Text.Pandoc.Diagrams
-- import           Text.CSL.Pandoc
import           Control.Monad
import           Text.Pandoc.Walk
import           Text.Pandoc.AnchorJS
import           Hakyll.Web.Bulma.Tags
import           Text.Pandoc.LocalUtils
import           Data.Text  (pack)
--------------------------------------------------------------------------------

fname = "templates/bootstrap.html"
tempStr = pack $ unsafePerformIO $ readFile fname
tocTemplate =
        either error id $ either (error . show) id $
        Pandoc.runPure $ Pandoc.runWithDefaultPartials $
        Pandoc.compileTemplate fname tempStr

-- | Modify the image name from a relative path to a fake absolute path
--   as required by hakyll relativizeUrls function.
fixupImageName :: Block -> Block
fixupImageName (Plain [Image x z (filename, y)]) =
  Plain [Image x z (addSlash filename, y)]
fixupImageName x = x

-- pandocCompilerDiagramsWith :: ReaderOptions -> WriterOptions -> Compiler (Item String)
-- pandocCompilerDiagramsWith ropt wopt = pandocCompilerWithTransformM ropt wopt diagramsTransformer
-- 
-- diagramsTransformer :: Pandoc -> Compiler Pandoc
-- diagramsTransformer pandoc = unsafeCompiler $ (fmap fixTbl) (renderCSV pandoc)

-- | Transform a blog post by looking for code blocks with class
--   @diagrams@, and replacing them with images generated by evaluating the
--   identifier @diagrams@ and rendering the resulting diagram.  In
--   addition, blocks with class @diagrams-def@ are collected (and deleted
--   from the output) and provided as additional definitions that will
--   be in scope during evaluation of all @diagrams@ blocks.
-- renderBlockDiagrams :: Pandoc -> IO Pandoc
-- renderBlockDiagrams = bottomUpM (concatMapM diagramsFilter)

-- renderCSV :: Pandoc -> IO Pandoc
-- renderCSV = bottomUpM (concatMapM tablifyCsvLinks)

-- diagramsFilter :: Block -> IO [Block]
-- diagramsFilter x = liftM (map fixupImageName) $ (insertDiagrams $ Opts "html" "generatedimages" "example") x

concatMapM :: Monad m => (a -> m [b]) -> [a] -> m [b]
concatMapM f xs = concat <$> mapM f xs

-- fixupTableCell :: Block -> Block
-- fixupTableCell (Para y) = (Plain y)
-- fixupTableCell x          = x
-- 
-- fTC :: [Block] -> [Block]
-- fTC x = map fixupTableCell x
-- 
-- fixupTable :: Cell -> Cell
-- fixupTable t@(Cell a b c d th) = (Cell a b c d (fTC th))
-- fixupTable x                   = x
-- 
-- fixTbl :: Pandoc -> Pandoc
-- fixTbl = walk fixupTable

-- The below combination is most likely more verbose than required.
-- The fromGlob function may not be required.
postDirs = ["posts/*", "blog/**"]
postPattern = foldr1 (.||.) (map fromGlob postDirs)
allPattern = foldr1 (.||.) (map fromGlob (postDirs))

copyDirs =
  [ "patches/**"
  , "images/**"
  , "js/**"
  , "favicon.ico"
  , "generatedimages/**"
  , "CNAME"
  , "static_root/**"
  ]
copyPattern = foldr1 (.||.) (map fromGlob copyDirs)

pc_ajs ropt wopt = pandocCompilerWithTransform ropt wopt anchorLinks

pandocTemplate :: String
pandocTemplate = "templates/bootstrap.html"

pandocHTMLCompiler :: Compiler (Item String)
pandocHTMLCompiler =
  let writerOptions = defaultHakyllWriterOptions
        { writerTableOfContents = True
        , writerTemplate = Just tocTemplate
        , writerCiteMethod      = Citeproc
                         -- , writerHighlight = True
        , writerHighlightStyle  = Just pygments
        }
  in  pc_ajs defaultHakyllReaderOptions writerOptions

pandocTemplateDependency :: Rules a -> Rules a
pandocTemplateDependency =
  rulesExtraDependencies [IdentifierDependency $ fromFilePath pandocTemplate]

main :: IO ()
main = hakyll $ do
  match "images/**" $ do
    route idRoute
    compile copyFileCompiler

  match copyPattern $ do
    route idRoute
    compile copyFileCompiler

  match "css/*" $ do
    route idRoute
    compile compressCssCompiler

  pandocTemplateDependency
    $ match (fromList ["about.md", "contact.markdown"])
    $ do
        route $ setExtension "html"
        compile
          $   pandocHTMLCompiler
          >>= loadAndApplyTemplate "templates/default.html" defaultContext
          >>= relativizeUrls

  -- build up tags
  tags <- buildTags allPattern (fromCapture "tags/*.html")
  tagsRules tags $ \tag pattern -> do
    let title = "Posts tagged \"" ++ tag ++ "\""
    route idRoute
    compile $ do
      posts <- recentFirst =<< loadAll pattern
      let ctx =
            constField "title" title
              `mappend` listField "posts" postCtx (return posts)
              `mappend` defaultContext

      makeItem ""
        >>= loadAndApplyTemplate "templates/tags.html"    ctx
        >>= loadAndApplyTemplate "templates/default.html" ctx
        >>= relativizeUrls

  pandocTemplateDependency $ match allPattern $ do
    route $ setExtension "html"
    compile
      $   pandocHTMLCompiler
      >>= loadAndApplyTemplate "templates/post.html"    (postCtxWithTags tags)
      >>= loadAndApplyTemplate "templates/default.html" (postCtxWithTags tags)
      >>= relativizeUrls

  match "index.html" $ do
    route idRoute
    compile $ do
      posts <- recentFirst =<< loadAll (postPattern .&&. hasNoVersion)
      let indexCtx =
            listField "posts" (postCtxWithTags tags) (return posts)
              `mappend` constField "title" "Home"
              `mappend` defaultContext

      getResourceBody
        >>= applyAsTemplate indexCtx
        >>= loadAndApplyTemplate "templates/default.html" indexCtx
        >>= relativizeUrls

  match "templates/*.html" $ compile templateCompiler

  match ("static_root/*" .||. "static_root/.gitignore*") $ do
    route (gsubRoute "static_root/" (const ""))
    compile copyFileCompiler

--------------------------------------------------------------------------------
postCtx :: Context String
postCtx = dateField "date" "%B %e, %Y" `mappend` defaultContext

postCtxWithTags :: Tags -> Context String
postCtxWithTags tags =
  (tagsFieldBulma "tag is-link") "tags" tags `mappend` postCtx
